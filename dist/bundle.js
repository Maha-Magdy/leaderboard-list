(()=>{"use strict";var n={402:(n,e,r)=>{r.d(e,{Z:()=>i});var t=r(15),A=r.n(t),s=r(645),o=r.n(s)()(A());o.push([n.id,"body {\r\n  font-family: cursive, sans-serif;\r\n  padding: 50px; }\r\n\r\nform {\r\n  width: 75%;\r\n  position: relative; }\r\n  form button {\r\n    position: absolute;\r\n    right: 0; }\r\n\r\ninput {\r\n  padding: 10px;\r\n  width: calc(100% - 25px); }\r\n\r\nbutton {\r\n  border: unset;\r\n  padding: 10px 50px;\r\n  background: #24c7bf;\r\n  color: white;\r\n  font-size: medium;\r\n  box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.2);\r\n  -webkit-box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.2);\r\n  -moz-box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.2); }\r\n\r\n.m-0 {\r\n  margin: 0; }\r\n\r\n.mb-25 {\r\n  margin-bottom: 25px; }\r\n\r\n.mb-15 {\r\n  margin-bottom: 15px; }\r\n\r\n.w-50 {\r\n  width: 50%; }\r\n\r\n.p-lr {\r\n  padding: 0 50px; }\r\n\r\nmain {\r\n  display: flex; }\r\n\r\n.recent-scores-header {\r\n  display: flex;\r\n  justify-content: space-between; }\r\n\r\n.d-block {\r\n  display: block; }\r\n\r\n#recent-scores ul {\r\n  list-style: none;\r\n  border: 1px solid black;\r\n  padding: 0;\r\n  border-radius: 5px; }\r\n  #recent-scores ul li {\r\n    padding: 10px 15px; }\r\n  #recent-scores ul li:nth-child(even) {\r\n    background-color: #f2f2f2; }\r\n\r\n.lds-ellipsis {\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 80px;\r\n  height: 80px; }\r\n\r\n.lds-ellipsis div {\r\n  position: absolute;\r\n  top: 33px;\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  background: #24c7bf;\r\n  animation-timing-function: cubic-bezier(0, 1, 1, 0); }\r\n\r\n.lds-ellipsis div:nth-child(1) {\r\n  left: 8px;\r\n  animation: lds-ellipsis1 0.6s infinite; }\r\n\r\n.lds-ellipsis div:nth-child(2) {\r\n  left: 8px;\r\n  animation: lds-ellipsis2 0.6s infinite; }\r\n\r\n.lds-ellipsis div:nth-child(3) {\r\n  left: 32px;\r\n  animation: lds-ellipsis2 0.6s infinite; }\r\n\r\n.lds-ellipsis div:nth-child(4) {\r\n  left: 56px;\r\n  animation: lds-ellipsis3 0.6s infinite; }\r\n\r\n@keyframes lds-ellipsis1 {\r\n  0% {\r\n    transform: scale(0); }\r\n  100% {\r\n    transform: scale(1); } }\r\n@keyframes lds-ellipsis3 {\r\n  0% {\r\n    transform: scale(1); }\r\n  100% {\r\n    transform: scale(0); } }\r\n@keyframes lds-ellipsis2 {\r\n  0% {\r\n    transform: translate(0, 0); }\r\n  100% {\r\n    transform: translate(24px, 0); } }\r\n\r\n/*# sourceMappingURL=style.css.map */\r\n","",{version:3,sources:["webpack://./src/sass/style.scss","webpack://./src/css/style.css"],names:[],mappings:"AAAA;EACE,gCAAgC;EAChC,aAAa,EAAA;;AAGf;EACE,UAAU;EACV,kBAAkB,EAAA;EAClB;IACE,kBAAkB;IAClB,QAAQ,EAAA;;AAIZ;EACE,aAAa;EACb,wBAAwB,EAAA;;AAG1B;EACE,aAAa;EACb,kBAAkB;EAClB,mBAAmB;EACnB,YAAY;EACZ,iBAAiB;EACjB,8CAA8C;EAC9C,sDAAsD;EACtD,mDAAmD,EAAA;;AAGrD;EACE,SAAS,EAAA;;AAGX;EACE,mBAAmB,EAAA;;AAGrB;EACE,mBAAmB,EAAA;;AAGrB;EACE,UAAU,EAAA;;AAGZ;EACE,eAAe,EAAA;;AAGjB;EACE,aAAa,EAAA;;AAGf;EACE,aAAa;EACb,8BAA8B,EAAA;;AAGhC;EACE,cAAc,EAAA;;AAGhB;EACE,gBAAgB;EAChB,uBAAuB;EACvB,UAAU;EACV,kBAAkB,EAAA;EAElB;IACE,kBAAkB,EAAA;EAGpB;IACE,yBAAyB,EAAA;;AAK7B;EACE,qBAAqB;EACrB,kBAAkB;EAClB,WAAW;EACX,YAAY,EAAA;;AAEd;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;EACnB,mDAAmD,EAAA;;AAErD;EACE,SAAS;EACT,sCAAsC,EAAA;;AAExC;EACE,SAAS;EACT,sCAAsC,EAAA;;AAExC;EACE,UAAU;EACV,sCAAsC,EAAA;;AAExC;EACE,UAAU;EACV,sCAAsC,EAAA;;AAExC;EACE;IACE,mBAAmB,EAAA;EAErB;IACE,mBAAmB,EAAA,EAAA;AAGvB;EACE;IACE,mBAAmB,EAAA;EAErB;IACE,mBAAmB,EAAA,EAAA;AAGvB;EACE;IACE,0BAA0B,EAAA;EAE5B;IACE,6BAA6B,EAAA,EAAA;;ACxBjC,oCAAoC",sourceRoot:""}]);const i=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r=n(e);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(n,r,t){"string"==typeof n&&(n=[[null,n,""]]);var A={};if(t)for(var s=0;s<this.length;s++){var o=this[s][0];null!=o&&(A[o]=!0)}for(var i=0;i<n.length;i++){var a=[].concat(n[i]);t&&A[a[0]]||(r&&(a[2]?a[2]="".concat(r," and ").concat(a[2]):a[2]=r),e.push(a))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,t=new Array(e);r<e;r++)t[r]=n[r];return t}n.exports=function(n){var r,t,A=(t=4,function(n){if(Array.isArray(n))return n}(r=n)||function(n,e){var r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var t,A,s=[],o=!0,i=!1;try{for(r=r.call(n);!(o=(t=r.next()).done)&&(s.push(t.value),!e||s.length!==e);o=!0);}catch(n){i=!0,A=n}finally{try{o||null==r.return||r.return()}finally{if(i)throw A}}return s}}(r,t)||function(n,r){if(n){if("string"==typeof n)return e(n,r);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?e(n,r):void 0}}(r,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=A[1],o=A[3];if(!o)return s;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),c="/*# ".concat(a," */"),l=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[s].concat(l).concat([c]).join("\n")}return[s].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var s={},o=[],i=0;i<n.length;i++){var a=n[i],c=t.base?a[0]+t.base:a[0],l=s[c]||0,d="".concat(c," ").concat(l);s[c]=l+1;var u=r(d),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(e[u].references++,e[u].updater(p)):e.push({identifier:d,updater:A(p,t),references:1}),o.push(d)}return o}function A(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r.update(n=e)}else r.remove()}}n.exports=function(n,A){var s=t(n=n||[],A=A||{});return function(n){n=n||[];for(var o=0;o<s.length;o++){var i=r(s[o]);e[i].references--}for(var a=t(n,A),c=0;c<s.length;c++){var l=r(s[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}s=a}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t=r.css,A=r.media,s=r.sourceMap;A?n.setAttribute("media",A):n.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(t,n)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var A=e[t];if(void 0!==A)return A.exports;var s=e[t]={id:t,exports:{}};return n[t](s,s.exports,r),s.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=r(379),e=r.n(n),t=r(795),A=r.n(t),s=r(569),o=r.n(s),i=r(565),a=r.n(i),c=r(216),l=r.n(c),d=r(589),u=r.n(d),p=r(402),E={};E.styleTagTransform=u(),E.setAttributes=a(),E.insert=o().bind(null,"head"),E.domAPI=A(),E.insertStyleElement=l(),e()(p.Z,E),p.Z&&p.Z.locals&&p.Z.locals;class f{constructor(n,e){this.name=n,this.score=e}async addNewRecord(){const n=await fetch("https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/7KZzvMgheMijgkb7Br8c/scores/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user:this.name,score:this.score})});try{return await n.json()}catch(n){console.log("There is an error:",n)}}}const m=document.getElementById("recent-scores-list"),C=document.getElementById("loading-spinner"),h=()=>{m.innerHTML="",C.style.display="block",m.style.display="none",class{static getRecentScores(){return(async()=>{const n=await fetch("https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/7KZzvMgheMijgkb7Br8c/scores/",{method:"GET"});try{return(await n.json()).result}catch(n){console.log("There is an error:",n)}})()}}.getRecentScores().then((n=>{for(let e=0;e<n.length;e++){const r=document.createElement("li");r.appendChild(document.createTextNode(`${n[e].user}: ${n[e].score}`)),m.appendChild(r)}C.style.display="none",m.style.display="block"}))};window.addEventListener("load",h()),document.getElementById("refresh-list").addEventListener("click",(()=>{h()}));const B=document.getElementById("name"),v=document.getElementById("score");document.getElementById("submit-new-score").addEventListener("click",(n=>{n.preventDefault(),""!==B.value&&""!==v.value&&(new f(B.value,v.value).addNewRecord(),B.value=null,v.value=null)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,